// <auto-generated />
using ExoEF.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExoEF.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231103093621_ajoutDatarel")]
    partial class ajoutDatarel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExoEF.Entities.Actor", b =>
                {
                    b.Property<int>("personId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("personId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("personId");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            personId = 1,
                            FirstName = "Arnold",
                            LastName = "Schwarzenegger"
                        },
                        new
                        {
                            personId = 2,
                            FirstName = "Kate",
                            LastName = "Winslet"
                        },
                        new
                        {
                            personId = 3,
                            FirstName = "Leonardo",
                            LastName = "DiCaprio"
                        },
                        new
                        {
                            personId = 4,
                            FirstName = "Meryl",
                            LastName = "Streep"
                        },
                        new
                        {
                            personId = 5,
                            FirstName = "Johnny",
                            LastName = "Depp"
                        },
                        new
                        {
                            personId = 6,
                            FirstName = "Angelina",
                            LastName = "Jolie"
                        },
                        new
                        {
                            personId = 7,
                            FirstName = "Brad",
                            LastName = "Pitt"
                        },
                        new
                        {
                            personId = 8,
                            FirstName = "Tom",
                            LastName = "Cruise"
                        },
                        new
                        {
                            personId = 9,
                            FirstName = "Natalie",
                            LastName = "Portman"
                        },
                        new
                        {
                            personId = 10,
                            FirstName = "Tom",
                            LastName = "Hanks"
                        });
                });

            modelBuilder.Entity("ExoEF.Entities.ActorMovie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("ExoEF.Entities.Director", b =>
                {
                    b.Property<int>("personId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("personId"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("personId");

                    b.ToTable("Director");

                    b.HasData(
                        new
                        {
                            personId = 1,
                            FirstName = "Steven",
                            LastName = "Spielberg"
                        },
                        new
                        {
                            personId = 2,
                            FirstName = "Quentin",
                            LastName = "Tarantino"
                        },
                        new
                        {
                            personId = 3,
                            FirstName = "Christopher",
                            LastName = "Nolan"
                        },
                        new
                        {
                            personId = 4,
                            FirstName = "Kathryn",
                            LastName = "Bigelow"
                        },
                        new
                        {
                            personId = 5,
                            FirstName = "Martin",
                            LastName = "Scorsese"
                        },
                        new
                        {
                            personId = 6,
                            FirstName = "Francis Ford",
                            LastName = "Coppola"
                        },
                        new
                        {
                            personId = 7,
                            FirstName = "Paul Thomas",
                            LastName = "Anderson"
                        },
                        new
                        {
                            personId = 8,
                            FirstName = "Spike",
                            LastName = "Lee"
                        },
                        new
                        {
                            personId = 9,
                            FirstName = "Denis",
                            LastName = "Villeneuve"
                        },
                        new
                        {
                            personId = 10,
                            FirstName = "Joel and Ethan",
                            LastName = "Coen"
                        });
                });

            modelBuilder.Entity("ExoEF.Entities.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("YearRelease")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("DirectorID");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Movies");

                    b.HasCheckConstraint("CK_YearRelease", "YearRelease > 1975");
                });

            modelBuilder.Entity("ExoEF.Entities.ActorMovie", b =>
                {
                    b.HasOne("ExoEF.Entities.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExoEF.Entities.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ExoEF.Entities.Movie", b =>
                {
                    b.HasOne("ExoEF.Entities.Director", "DirectorFilm")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectorFilm");
                });

            modelBuilder.Entity("ExoEF.Entities.Actor", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ExoEF.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ExoEF.Entities.Movie", b =>
                {
                    b.Navigation("Actors");
                });
#pragma warning restore 612, 618
        }
    }
}
